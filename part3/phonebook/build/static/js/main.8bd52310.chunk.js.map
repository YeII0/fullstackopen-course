{"version":3,"sources":["services/contacts.js","App.js","index.js"],"names":["baseUrl","exportedObjects","getAll","axios","get","then","response","data","create","newObject","post","remove","id","delete","update","put","Search","onChange","AddContactForm","onSubmit","newName","newNumber","nameOnChange","numberOnChange","value","type","Contacts","contacts","removeContact","map","contact","Contact","name","number","onClick","Notification","message","notificationType","Error","className","App","useState","setContacts","filteredContacts","setFilteredContacts","filter","setFilter","setNewName","setNewNumber","notification","setNotificationMessage","setNotificationType","useEffect","contactService","initContacts","filterContacts","searchFilter","toLowerCase","includes","updateContact","updatedContact","returnedContact","updatedContacts","elem","catch","error","setTimeout","e","target","preventDefault","some","alert","contactToUpdate","find","window","confirm","newContact","concat","err","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8bd52310.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios\r\n    .get(baseUrl)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  return axios\r\n    .post(baseUrl, newObject)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios\r\n    .put(`${baseUrl}/${id}`, newObject)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  return axios\r\n    .delete(`${baseUrl}/${id}`)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst exportedObjects = { getAll, create, remove, update }\r\n\r\nexport default exportedObjects","import React, { useState, useEffect } from 'react'\nimport contactService from './services/contacts'\n\nconst Search = ({ onChange }) => (\n  <input onChange={onChange} />\n)\n\nconst AddContactForm = ({\n    onSubmit, newName, newNumber, nameOnChange, numberOnChange\n  }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input value={newName} onChange={nameOnChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={numberOnChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Contacts = ({ contacts, removeContact }) => {\n  return (\n    <div>\n      {contacts.map(\n        contact => (\n          <Contact\n          key={contact.id}\n          contact={contact}\n          removeContact={removeContact}\n          />\n        )\n      )}\n    </div>\n  )\n}\n\nconst Contact = ({ contact, removeContact }) => (\n  <div>\n    {contact.name} {contact.number}\n    <button onClick={() => removeContact(contact)}>\n      delete\n    </button>\n  </div>\n)\n\n/*\nAccepted types for notificationType are strings 'error' and success'.\n*/\nconst Notification = ({ message, notificationType }) => {\n  if (message === null) {\n    return null\n  }\n  if (notificationType !== 'error' && notificationType !== 'success' && notificationType !== null) {\n    throw Error(\n      `Incorrect notificationType parameter. Accepted values are `\n      + `'error' and 'success' strings.`\n    )\n  }\n  return (\n    <div className={`notification ${notificationType}`}>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  /* States\n  ========================================================================== */\n  const [contacts, setContacts] = useState([])\n  const [filteredContacts, setFilteredContacts] = useState([])\n  const [filter, setFilter] = useState('')\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [notification, setNotificationMessage] = useState(null)\n  const [notificationType, setNotificationType] = useState(null)\n\n  /* Effects\n  ========================================================================== */\n  useEffect(() => {\n    contactService.getAll().then(initContacts => {\n      setContacts(initContacts)\n    })\n  }, [])\n\n  /* Handlers\n  ========================================================================== */\n  const filterContacts = (searchFilter, contacts) => {\n    if (searchFilter === '') {\n      setFilteredContacts([])\n      setFilter(searchFilter)\n      return\n    }\n    const filteredContacts = contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(searchFilter.toLowerCase())\n    })\n    setFilteredContacts(filteredContacts)\n    setFilter(searchFilter)\n  }\n\n  const addContact = e => {\n    e.preventDefault()\n\n    if (contacts.some(contact => contact.number === newNumber)) {\n      return alert(`${newNumber} is already added to phonebook`)\n    }\n\n    const contactToUpdate = contacts.find(contact => contact.name === newName)\n    if (contactToUpdate) {\n      if (!window.confirm(\n        'This contact already exists.'\n        + ' Do you want update number?'\n      )) {\n        return\n      }\n\n      updateContact(contactToUpdate, newNumber)\n      return\n    }\n\n    const newContact = {\n      name: newName,\n      number: newNumber\n    }\n    \n    contactService\n      .create(newContact)\n      .then(returnedContact => {\n        const updatedContacts = contacts.concat(returnedContact)\n        setContacts(updatedContacts)\n        filterContacts(filter, updatedContacts)\n        setNotificationMessage('Contact added successfully')\n        setNotificationType('success')\n        setTimeout(() => {\n          setNotificationMessage(null)\n        },4000)\n      })\n      .catch(error => {\n        setNotificationMessage(error.response.data.error)\n        setNotificationType('error')\n        setTimeout(() => {\n          setNotificationMessage(null)\n        },10000)\n      })\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const updateContact = (contact, newNumber) => {\n    const updatedContact = { ...contact, number: newNumber }\n    contactService\n      .update(contact.id, updatedContact)\n      .then(returnedContact => {\n        const updatedContacts = contacts.map(elem => (\n          elem.id !== contact.id ? elem : returnedContact\n        ))\n        setContacts(updatedContacts)\n          filterContacts(filter, updatedContacts)\n      })\n      .catch(error => {\n        setNotificationMessage(error.response.data.error)\n        setNotificationType('error')\n        setTimeout(() => {\n          setNotificationMessage(null)\n        },10000)\n      })\n  }\n  \n  const updateName = e => {\n    setNewName(e.target.value)\n  }\n\n  const updateNumber = e => {\n    setNewNumber(e.target.value)\n  }\n\n  const removeContact = (contact) => {\n    contactService\n      .remove(contact.id)\n      .catch(err => {\n        setNotificationMessage(`Contact ${contact.name} does not exist anymore.`)\n        setNotificationType('error')\n        setTimeout(() => {\n          setNotificationMessage(null)\n        },4000)\n      })\n      .finally(() => {\n        const updatedContacts = contacts.filter(elem => elem.id !== contact.id)\n        setContacts(updatedContacts)\n        filterContacts(filter, updatedContacts)\n      })\n  }\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} notificationType={notificationType} />\n      <div>\n        Search: <Search onChange={e => filterContacts(e.target.value, contacts)} />\n      </div>\n      <h2>Add new</h2>\n      <AddContactForm\n        onSubmit={addContact}\n        newName={newName}\n        newNumber={newNumber}\n        nameOnChange={updateName}\n        numberOnChange={updateNumber}\n      />\n      <h2>Numbers</h2>\n      <Contacts\n        contacts={\n          filter === '' ? contacts : filteredContacts\n        }\n        removeContact={removeContact}\n      />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}